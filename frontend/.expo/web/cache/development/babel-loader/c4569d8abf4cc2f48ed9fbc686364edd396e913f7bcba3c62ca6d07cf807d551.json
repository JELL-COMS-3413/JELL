{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { PieChart } from \"react-native-svg-charts\";\nimport { Text as SvgText } from \"react-native-svg\";\nimport loadFonts from \"./styles/fonts\";\nimport { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nvar calculatePercentage = function calculatePercentage(value, total) {\n  return (parseFloat(value) / total * 100).toFixed(1);\n};\nexport default function BudgetPieChart(_ref) {\n  var data = _ref.data;\n  var colors = [\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4BC0C0\", \"#9966FF\"];\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    fontsLoaded = _useState2[0],\n    setFontsLoaded = _useState2[1];\n  useEffect(function () {\n    loadFonts().then(function () {\n      return setFontsLoaded(true);\n    });\n  }, []);\n  var totalValue = data.reduce(function (acc, item) {\n    return acc + parseFloat(item.value);\n  }, 0);\n  var pieData = data.map(function (item, index) {\n    return {\n      key: item._id,\n      value: parseFloat(item.value),\n      svg: {\n        fill: colors[index % colors.length]\n      },\n      arc: {\n        outerRadius: \"100%\",\n        cornerRadius: 10\n      },\n      label: item.title,\n      percentage: calculatePercentage(item.value, totalValue)\n    };\n  }).filter(function (item) {\n    return item.value > 0;\n  });\n  var Labels = function Labels(_ref2) {\n    var slices = _ref2.slices;\n    return slices.map(function (slice, index) {\n      var pieCentroid = slice.pieCentroid,\n        data = slice.data;\n      return _jsxs(SvgText, {\n        x: pieCentroid[0],\n        y: pieCentroid[1],\n        fill: \"black\",\n        textAnchor: \"middle\",\n        alignmentBaseline: \"middle\",\n        fontSize: 14,\n        stroke: \"black\",\n        strokeWidth: 0.2,\n        fontFamily: \"LouisGeorgeCafe\",\n        children: [`${data.label} (${data.percentage}%)`, \" \"]\n      }, index);\n    });\n  };\n  return _jsx(View, {\n    style: {\n      alignItems: \"center\"\n    },\n    children: _jsx(PieChart, {\n      style: {\n        height: 200,\n        width: 320,\n        paddingLeft: 40,\n        paddingRight: 40,\n        alignSelf: \"center\",\n        marginTop: 10\n      },\n      data: pieData,\n      children: _jsx(Labels, {})\n    })\n  });\n}\nBudgetPieChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired\n  })).isRequired\n};","map":{"version":3,"names":["React","useEffect","useState","PropTypes","View","Text","PieChart","SvgText","loadFonts","jsxs","_jsxs","jsx","_jsx","calculatePercentage","value","total","parseFloat","toFixed","BudgetPieChart","_ref","data","colors","_useState","_useState2","_slicedToArray","fontsLoaded","setFontsLoaded","then","totalValue","reduce","acc","item","pieData","map","index","key","_id","svg","fill","length","arc","outerRadius","cornerRadius","label","title","percentage","filter","Labels","_ref2","slices","slice","pieCentroid","x","y","textAnchor","alignmentBaseline","fontSize","stroke","strokeWidth","fontFamily","children","style","alignItems","height","width","paddingLeft","paddingRight","alignSelf","marginTop","propTypes","arrayOf","shape","number","isRequired","string"],"sources":["C:/Users/laura/appDev/JELL/frontend/Components/PieChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { View, Text } from \"react-native\";\r\nimport { PieChart } from \"react-native-svg-charts\";\r\nimport { Text as SvgText } from \"react-native-svg\";\r\nimport loadFonts from \"./styles/fonts\";\r\n\r\n// Helper function to calculate percentage\r\nconst calculatePercentage = (value, total) => {\r\n  return ((parseFloat(value) / total) * 100).toFixed(1);\r\n};\r\n\r\nexport default function BudgetPieChart({ data }) {\r\n  const colors = [\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4BC0C0\", \"#9966FF\"];\r\n  const [fontsLoaded, setFontsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadFonts().then(() => setFontsLoaded(true));\r\n  }, []);\r\n\r\n  // Calculate the total value for percentage calculation\r\n  const totalValue = data.reduce(\r\n    (acc, item) => acc + parseFloat(item.value),\r\n    0\r\n  );\r\n\r\n  const pieData = data\r\n    .map((item, index) => ({\r\n      key: item._id,\r\n      value: parseFloat(item.value),\r\n      svg: { fill: colors[index % colors.length] },\r\n      arc: { outerRadius: \"100%\", cornerRadius: 10 },\r\n      label: item.title,\r\n      percentage: calculatePercentage(item.value, totalValue),\r\n    }))\r\n    .filter((item) => item.value > 0);\r\n\r\n  const Labels = ({ slices }) => {\r\n    return slices.map((slice, index) => {\r\n      const { pieCentroid, data } = slice;\r\n      return (\r\n        <SvgText\r\n          key={index}\r\n          x={pieCentroid[0]}\r\n          y={pieCentroid[1]}\r\n          fill=\"black\"\r\n          textAnchor=\"middle\"\r\n          alignmentBaseline=\"middle\"\r\n          fontSize={14}\r\n          stroke=\"black\"\r\n          strokeWidth={0.2}\r\n          fontFamily={\"LouisGeorgeCafe\"}\r\n        >\r\n          {`${data.label} (${data.percentage}%)`}{\" \"}\r\n        </SvgText>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={{ alignItems: \"center\" }}>\r\n      <PieChart\r\n        style={{\r\n          height: 200,\r\n          width: 320,\r\n          paddingLeft: 40,\r\n          paddingRight: 40,\r\n          alignSelf: \"center\",\r\n          marginTop: 10,\r\n        }}\r\n        data={pieData}\r\n      >\r\n        <Labels />\r\n      </PieChart>\r\n    </View>\r\n  );\r\n}\r\n\r\nBudgetPieChart.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}